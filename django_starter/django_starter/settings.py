"""
Django settings for django_starter project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import gettext_lazy as _
from django_starter.enums import Environment, EnumCaseNotFound
from dotenv import dotenv_values

SETTINGS_DIR = Path(__file__).absolute().parent
BASE_DIR = SETTINGS_DIR.parent

env_file = BASE_DIR.parent.joinpath('.env')
if not env_file.is_file():
    raise ImproperlyConfigured(f'.env file is missing at {env_file}')

denv = dotenv_values(dotenv_path=env_file)

try:
    ENVIRONMENT: Environment = Environment.from_key(denv.get('ENVIRONMENT', None))
    DEBUG = ENVIRONMENT == Environment.debug
except EnumCaseNotFound as e:
    raise ImproperlyConfigured(str(e))

SECRET_KEY_FILE = SETTINGS_DIR.joinpath('secret.txt')
with SECRET_KEY_FILE.open('r') as f:
    SECRET_KEY = f.read()

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'core.apps.CoreConfig',
]
if DEBUG:
    INSTALLED_APPS += [
        'debug_toolbar'
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
if DEBUG:
    MIDDLEWARE += [
        'debug_toolbar.middleware.DebugToolbarMiddleware'
    ]

ROOT_URLCONF = 'django_starter.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
if DEBUG:
    TEMPLATES[0]['OPTIONS']['context_processors'] = [
        'django.template.context_processors.debug'
    ] + TEMPLATES[0]['OPTIONS']['context_processors']


WSGI_APPLICATION = 'django_starter.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
# Provide custom settings via settings_local.py

# https://docs.djangoproject.com/en/3.0/ref/databases/#persistent-database-connections
CONN_MAX_AGE = 2

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': 'localhost',
        'USER': '',
        'PASSWORD': '',
    }
}

# Logging
# https://docs.djangoproject.com/en/3.0/topics/logging/

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'standard': {
            'format': '[{levelname}] {asctime} {message}',
            'style': '{',
        },
        'wsgi': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'django.db.backends': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'INFO',
        },
        'django.template': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'django.utils.autoreload': {
            'level': 'INFO',
        },
        'default': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'cron': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'WARNING',
        }
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LOCALE_PATHS = [
    str(SETTINGS_DIR.joinpath('locale').absolute()),
]

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en', _('English')),
    ('de', _('German')),
]
LANGUAGE_CODES = [it[0] for it in LANGUAGES]
LANGUAGE_NAMES = [it[1] for it in LANGUAGES]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR.joinpath('static')

# Other Django Settings
CSRF_COOKIE_SECURE = True
SECURE_REFERRER_POLICY = 'no-referrer'

# Django Debug Toolbar
INTERNAL_IPS = [
    '127.0.0.1',
]

# Custom Settings
